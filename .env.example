# ChronoStamp Protocol - Environment Configuration
# ================================================
# 
# Since the ".env" file is gitignored, you can use the ".env.example" file to
# build a new ".env" file when you clone the repo. Keep this file up-to-date
# when you add new variables to `.env`.
#
# This file will be committed to version control, so make sure not to have any
# secrets in it. If you are cloning this repo, create a copy of this file named
# ".env" and populate it with your secrets.
#
# When adding additional environment variables, the schema in "/src/env.js"
# should be updated accordingly.
#
# IMPORTANT: This project uses dual-environment configuration (dev/prod)
# that automatically switches based on NODE_ENV. For local development,
# you only need to configure the _DEV variables.

# =============================================================================
# DATABASE CONFIGURATION (Turso - LibSQL)
# =============================================================================
#
# ChronoStamp uses Turso for scalable SQLite-compatible database hosting.
# The application automatically switches between dev/prod databases based on NODE_ENV.
#
# Setup Instructions:
# 1. Install Turso CLI: `curl -sSfL https://get.tur.so/install.sh | bash`
# 2. Create account: `turso auth signup`
# 3. Create dev database: `turso db create chronostamp-dev`
# 4. Get database URL: `turso db show chronostamp-dev`
# 5. Create auth token: `turso db tokens create chronostamp-dev`

# Development Database (Required for local development)
DATABASE_URL_DEV="libsql://chronostamp-dev-your-username.turso.io"
DATABASE_AUTH_TOKEN_DEV="your-development-database-auth-token"

# Production Database (Only required for production deployment)
# For local development, these can remain as placeholders
DATABASE_URL_PROD="libsql://chronostamp-prod-your-username.turso.io"
DATABASE_AUTH_TOKEN_PROD="your-production-database-auth-token"

# =============================================================================
# IPFS STORAGE SERVICE (Pinata)
# =============================================================================
#
# ChronoStamp uses IPFS for decentralized storage of NFT metadata and artwork.
# Pinata provides a reliable IPFS gateway and pinning service.
#
# Setup Instructions:
# 1. Create account at: https://app.pinata.cloud/
# 2. Navigate to: API Keys > New Key
# 3. Grant permissions: pinFileToIPFS, pinJSONToIPFS
# 4. Copy the JWT token below

# Pinata JWT Token (Required for IPFS uploads)
PINATA_JWT="your-pinata-jwt-token-here"

# =============================================================================
# CRYPTOGRAPHIC SIGNATURE SERVICE
# =============================================================================
#
# ChronoStamp uses server-side cryptographic signatures to authorize NFT claims.
# These keys are used to generate off-chain proofs that are verified on-chain.
# 
# SECURITY IMPORTANT: 
# - Keep private keys secure and never commit them to version control
# - Use different keys for development and production environments
# - The public addresses must match the private keys exactly
#
# Setup Instructions:
# 1. Generate private key: `openssl rand -hex 32`
# 2. Add "0x" prefix to create Ethereum private key format
# 3. Derive public address using any Ethereum wallet or tool
# 4. Test the key pair before using in production

# Development Environment Signer (Required for local development)
# Generate a new private key for development - DO NOT use example values
SIGNER_PRIVATE_KEY_DEV="0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
NEXT_PUBLIC_SIGNER_ADDRESS_DEV="0x1234567890123456789012345678901234567890"

# Production Environment Signer (Only required for production deployment)
# For local development, these can remain as placeholders
# IMPORTANT: Use completely different keys in production for security
SIGNER_PRIVATE_KEY_PROD="0xplaceholder1234567890abcdef1234567890abcdef1234567890abcdef123456"
NEXT_PUBLIC_SIGNER_ADDRESS_PROD="0xplaceholder1234567890123456789012345678"

# =============================================================================
# WEB3 & BLOCKCHAIN CONFIGURATION
# =============================================================================
#
# ChronoStamp smart contract integration and blockchain network configuration.

# Factory Contract Address (Required - Public)
# This is the deployed factory contract that creates individual event contracts
# The factory contract handles event creation and ChronoStamp NFT deployment
NEXT_PUBLIC_FACTORY_CONTRACT_ADDRESS="0x1234567890123456789012345678901234567890"
# Use Arbitrum Sepolia existed factory contract address to quick development
# NEXT_PUBLIC_FACTORY_CONTRACT_ADDRESS="0x216Caa4eeFC6bbfDCda20D50A03E84E2E20F2E28" 

# RPC URL (Optional - Server-side)
# Custom RPC endpoint for smart contract deployment operations
# If not provided, the application uses default public RPCs
# Uncomment and configure if you need custom RPC endpoint:
RPC_URL="https://sepolia-rollup.arbitrum.io/rpc"

# =============================================================================
# NETWORK INFORMATION (No env vars needed - configured in Web3Provider)
# =============================================================================
#
# The application is configured to use Arbitrum Sepolia testnet by default.
# Network configuration is handled automatically in the Web3Provider component.
#
# Testnet Information:
# - Network: Arbitrum Sepolia Testnet
# - Chain ID: 421614
# - Block Explorer: https://sepolia.arbiscan.io/
# - Faucet: Get testnet ETH at https://bridge.arbitrum.io/
#
# Wallet connections and contract interactions are handled client-side.
# No additional RPC configuration required for basic functionality.

# =============================================================================
# SYSTEM VARIABLES (Automatically set - no configuration needed)
# =============================================================================
#
# The following variables are managed automatically:
# - NODE_ENV: Set by Next.js/Vercel (development/production)
# - SKIP_ENV_VALIDATION: Optional flag to skip env validation during builds
#
# These variables should NOT be added to your .env file unless specifically needed. 